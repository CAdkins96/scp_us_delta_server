{"version":3,"sources":["components/agent.js","components/agents.js","dataObjects.js","App.js","serviceWorker.js","index.js"],"names":["Agent","props","className","name","taskforce","supervisor","classification","clearance","species","Agents","arr","agents","map","i","to","path","key","id","fullName","abvName","Cryptids","SCPs","App","activeClassName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a05d3b5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Agent(props) {\n    return(\n        <div className=\"dataText\">\n            <text className=\"firstAgent\" >Name: {props.name}</text><br/><br/>\n            <text className=\"data\" >Task Force: {props.taskforce}</text><br/><br/>\n            <text className=\"data\" >Supervisor: {props.supervisor}</text><br/><br/>\n            <text className=\"data\" >Position: {props.classification}</text><br/><br/>\n            <text className=\"data\" >Clearance: {props.clearance}</text><br/><br/>\n            <text className=\"data\" >Species: {props.species}</text><br/><br/>\n        </div>\n    );\n}\n\nexport default Agent;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    NavLink,\n    Switch, \n    Route\n } from 'react-router-dom';\n import Agent from './agent';\n\nfunction Agents(props) {\n    var arr = props.agents;\n\n    return(\n        <div>\n            <Router>\n                <ol className=\"dataNav\">\n                    { arr.map(i => <NavLink to={i.path} key={i.id}>{i.fullName}</NavLink>)}\n                </ol>\n                <ol className=\"dataNavMobile\">\n                    { arr.map(i => <NavLink to={i.path} key={i.id}>{i.abvName}</NavLink>)}\n                </ol>\n                \n                <Switch>\n                    {arr.map( i =>\n                        <Route path={i.path} key={i.id}>\n                            <Agent \n                                name={i.fullName} \n                                taskforce={i.taskforce} \n                                supervisor={i.supervisor} \n                                classification={i.classification} \n                                clearance={i.clearance}\n                                species={i.species}\n                            />\n                        </Route>\n                    )}\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default Agents;","import React from 'react';\n\n    let agents = [\n        {\n            id: '001',\n            fullName: 'Agent Leeds',\n            abvName: 'Leeds',\n            supervisor: 'REDACTED',\n            classification: 'REDACTED',\n            clearance: 'REDACTED',\n            species: 'REDACTED',\n            taskforce: 'Cryptid Rogue',\n            path: '/AgentLeeds'\n        },\n        {\n            id: '033',\n            fullName: 'Alexander Grant',\n            abvName: 'Alex',\n            supervisor: 'Agent Leeds',\n            classification: 'Expert',\n            clearance: 'Cryptid',\n            species: 'Human',\n            taskforce: 'Cryptid Rogue',\n            path: '/AgentAlexander'\n        },\n        {\n            id: '034',\n            fullName: 'Axel Rose',\n            abvName: 'Axel',\n            supervisor: 'Agent Leeds',\n            classification: 'Wronged',\n            clearance: 'Cryptid',\n            species: 'Human',\n            taskforce: 'Cryptid Rogue',\n            path: '/AgentRose'\n        },\n        {\n            id: '035',\n            fullName: 'Eugene Fletcher',\n            abvName: 'Eugene',\n            supervisor: 'Agent Leeds',\n            classification: 'Flake',\n            clearance: 'Cryptid',\n            species: 'Human',\n            taskforce: 'Cryptid Rogue',\n            path: '/AgentFletcher'\n        },\n        {\n            id: '036',\n            fullName: 'Peter',\n            abvName: 'Peter',\n            supervisor: 'Agent Leeds',\n            classification: 'Mundane',\n            clearance: 'Cryptid',\n            species: 'Human',\n            taskforce: 'Cryptid Rogue',\n            path: '/AgentPeter'\n        }\n    ]\n\n\nexport default agents;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from 'react-router-dom';\nimport './App.css';\nimport Agents from './components/agents';\nimport agents from './dataObjects';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header>\n          <h1 className=\"heading\">Secure Contain Protect</h1>\n          <h3 className=\"headingMobile\">Secure Contain Protect</h3>\n          <h6>US - DELTA </h6>\n        </header>\n        <div className=\"navBar\">\n          <NavLink to=\"/Cryptids\" activeClassName=\"activeLink\">Cryptids</NavLink>\n          <NavLink to=\"/SCPs\" activeClassName=\"activeLink\">SCPs</NavLink>\n          <NavLink to=\"/Agents\" activeClassName=\"activeLink\">Agents</NavLink>\n        </div>\n        <Switch className=\"subNav\">\n          <Route path=\"/Cryptids\">\n            <Cryptids />\n          </Route>\n          <Route path=\"/SCPs\">\n            <SCPs />\n          </Route>\n          <Route path=\"/Agents\">\n            <Agents agents={agents} />\n          </Route>\n          <Route path=\"/\">\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Cryptids() {\n  return (<text>Cryptids</text>);\n}\n\nfunction SCPs() {\n  return (<text>SCPs</text>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}