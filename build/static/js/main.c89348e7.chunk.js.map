{"version":3,"sources":["components/agent.js","components/agents.js","dataObjects.js","components/scp.js","components/scps.js","components/accessDenied.js","components/scpClasses.js","App.js","serviceWorker.js","index.js"],"names":["Agent","props","className","name","taskforce","supervisor","classification","clearance","species","Agents","arr","agents","changeClass","basename","map","i","to","path","key","id","navPlacement","activeClassName","fullName","mobileClass","abvName","scps","idNum","class","scpClasses","newClass","SCP","SCPs","baseURL","Denied","SCPClasses","classes","access","canAccess","Cryptids","App","useState","classNames","setClassNames","classChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c89348e7.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Agent(props) {\n    return(\n        <div className=\"dataText\">\n            <text className=\"firstAgent\" >Name: {props.name}</text><br/><br/>\n            <text className=\"data\" >Task Force: {props.taskforce}</text><br/><br/>\n            <text className=\"data\" >Supervisor: {props.supervisor}</text><br/><br/>\n            <text className=\"data\" >Position: {props.classification}</text><br/><br/>\n            <text className=\"data\" >Clearance: {props.clearance}</text><br/><br/>\n            <text className=\"data\" >Species: {props.species}</text><br/><br/>\n        </div>\n    );\n}\n\nexport default Agent;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    NavLink,\n    Switch, \n    Route\n } from 'react-router-dom';\n import Agent from './agent';\n\nfunction Agents(props) {\n    var arr = props.agents;\n    let newClass = 'App Base';\n\n    props.changeClass(newClass);\n\n    \n\n    return(\n        <div>\n            <Router basename='/Agents'>\n                <ol className=\"dataNav\">\n                    { arr.map(i => <NavLink to={i.path} key={i.id} className={i.navPlacement} activeClassName=\"activeLink\">{i.fullName}</NavLink>)}\n                </ol>\n                <ol className=\"dataNavMobile\">\n                    { arr.map(\n                        i => {\n                            let mobileClass = 'mobileNav ' + i.navPlacement\n                            return(\n                                <NavLink to={i.path} key={i.id} className={mobileClass} activeClassName=\"activeLink\">{i.abvName}</NavLink>\n                            )\n                        }\n                    )\n                    }\n                </ol>\n                <Switch>\n                    {arr.map( i =>\n                        <Route path={i.path} key={i.id}>\n                            <Agent \n                                name={i.fullName} \n                                taskforce={i.taskforce} \n                                supervisor={i.supervisor} \n                                classification={i.classification} \n                                clearance={i.clearance}\n                                species={i.species}\n                            />\n                        </Route>\n                    )}\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default Agents;","export const agents = [\n    {\n        id: '001',\n        fullName: 'Agent Leeds',\n        abvName: 'Leeds',\n        supervisor: 'REDACTED',\n        classification: 'REDACTED',\n        clearance: 'REDACTED',\n        species: 'REDACTED',\n        taskforce: 'Cryptid Rogue',\n        path: '/AgentLeeds',\n        navPlacement: 'notLast'\n    },\n    {\n        id: '033',\n        fullName: 'Alexander Grant',\n        abvName: 'Alex',\n        supervisor: 'Agent Leeds',\n        classification: 'Expert',\n        clearance: 'Cryptid',\n        species: 'Human',\n        taskforce: 'Cryptid Rogue',\n        path: '/AgentAlexander',\n        navPlacement: 'notLast'\n    },\n    {\n        id: '034',\n        fullName: 'Axel Rose',\n        abvName: 'Axel',\n        supervisor: 'Agent Leeds',\n        classification: 'Wronged',\n        clearance: 'Cryptid',\n        species: 'Human',\n        taskforce: 'Cryptid Rogue',\n        path: '/AgentRose',\n        navPlacement: 'notLast'\n    },\n    {\n        id: '035',\n        fullName: 'Eugene Fletcher',\n        abvName: 'Eugene',\n        supervisor: 'Agent Leeds',\n        classification: 'Flake',\n        clearance: 'Cryptid',\n        species: 'Human',\n        taskforce: 'Cryptid Rogue',\n        path: '/AgentFletcher',\n        navPlacement: 'notLast'\n    },\n    {\n        id: '036',\n        fullName: 'Peter',\n        abvName: 'Peter',\n        supervisor: 'Agent Leeds',\n        classification: 'Mundane',\n        clearance: 'Cryptid',\n        species: 'Human',\n        taskforce: 'Cryptid Rogue',\n        path: '/AgentPeter',\n        navPlacement: 'last'\n    }\n];\n\nexport const cryptids = [\n    {\n        name: '',\n        powers: [],\n        abilities: [],\n        weaknesses: [],\n    }\n];\n\nexport const scps = [\n    {\n        id: '0',\n        idNum: '001',\n        name: '3',\n        class: 'Safe',\n        path: '/001'\n\n    },\n    {\n        id: '1',\n        idNum: '002',\n        name: '3',\n        class: 'Safe',\n        path: '/002'\n\n    },\n    {\n        id: '2',\n        idNum: '003',\n        name: '3',\n        class: 'Keter',\n        path: '/003'\n\n    },\n    {\n        id: '3',\n        idNum: '004',\n        name: '3',\n        class: 'Euclid',\n        path: '/004'\n\n    },\n];\n\nexport const scpClasses = [\n    {\n        id: '0',\n        class: 'Safe',\n        path: '/Safe',\n        newClass: 'App Safe',\n        navPlacement: 'notLast'\n    }, \n    {\n        id: '1',\n        class: 'Euclid',\n        path: '/Euclid',\n        newClass: 'App Euclid',\n        navPlacement: 'notLast'\n    },\n    {\n        id: '2',\n        class: 'Keter',\n        path: '/Keter',\n        newClass: 'App Keter',\n        navPlacement: 'notLast'\n    },\n    {\n        id: '3',\n        class: 'Thaumiel',\n        path: '/Thaumiel',\n        newClass: 'App Thaumiel',\n        navPlacement: 'notLast'\n    },\n    {\n        id: '4',\n        class: 'Apollyon',\n        path: '/Apollyon',\n        newClass: 'App Apollyon',\n        navPlacement: 'last'\n    }\n]","import React from 'react';\n\nfunction SCP(props) {\n    return(\n        <div className=\"dataText\">\n            <text className=\"firstAgent\" >Name: {props.name}</text><br/><br/>\n            <text className=\"data\" >ID: {props.idNum}</text><br/><br/>\n            <text className=\"data\" >Class: {props.class}</text><br/><br/>\n        </div>\n    );\n}\n\nexport default SCP;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    NavLink,\n    Switch, \n    Route\n } from 'react-router-dom';\n import SCP from './scp';\n\n function SCPs(props) {\n     let arr = props.scps;\n     let newClass = 'App ' + props.class;\n     let baseURL = '/SCPs/' + props.class;\n     \n     props.changeClass(newClass)\n\n     return(\n        <div>\n            <Router basename={baseURL}>\n                <ol>\n                    { arr.map(i => \n                        {\n                            if(i.class === props.class){\n                                return(<NavLink to={i.path} key={i.id} activeClassName=\"activeLink\">{i.idNum}: {i.name}</NavLink>)\n                            }\n                        }\n                    )}\n                </ol>\n                \n                <Switch>\n                    {arr.map( i =>\n                        <Route path={i.path} key={i.id}>\n                            <SCP \n                                name={i.name}\n                                idNum={i.idNum}\n                                class={i.class}\n                            />\n                        </Route>\n                    )}\n                </Switch>\n            </Router>\n        </div>\n     );\n }\n\n export default SCPs;\n","import React from 'react';\n\nfunction Denied() {\n    return (\n        <div className='denied'>\n            <h1>ACCESS DENIED</h1>\n        </div>\n    )\n}\n\nexport default Denied;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    NavLink,\n    Switch, \n    Route\n } from 'react-router-dom';\n import SCPs from './scps';\n import {scps} from '../dataObjects';\n import Denied from './accessDenied';\n\n function SCPClasses(props) {\n    let arr = props.classes;\n    let newClass = 'App Base';\n    let access = props.access;\n     \n    props.changeClass(newClass)\n\n    function canAccess(access) {\n        if(access === 'Granted'){\n            return(\n                <div>\n                    <Router basename='/SCPs'>\n                        <ol className='navBar'>\n                            { arr.map(\n                                i => {\n                                    let mobileClass='mobileNav ' + i.navPlacement;\n                                    return(\n                                        <NavLink to={i.path} key={i.id} className={mobileClass} activeClassName=\"activeLink\">{i.class}</NavLink>\n                                    )\n                                }\n                            )}\n                        </ol>\n                        \n                        <Switch>\n                            {arr.map( i =>\n                                <Route path={i.path} key={i.id}>\n                                    <SCPs \n                                        scps={scps}\n                                        class={i.class}\n                                        changeClass={props.changeClass}\n                                    />\n                                    \n                                </Route>\n                            )}\n                        </Switch>\n                    </Router>\n                </div>\n            )\n        }\n        else if(access === 'Denied'){\n            return (\n                <div className='deniedContainer'>\n                    <Denied />\n                </div>\n            )\n        }\n    }\n\n    return(\n        canAccess(access)\n     );\n }\n\n export default SCPClasses;","import React, {useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from 'react-router-dom';\nimport './App.css';\nimport Agents from './components/agents';\nimport {agents, scpClasses} from './dataObjects';\nimport SCPClasses from './components/scpClasses';\n\nfunction App() {\n  const [classNames, setClassNames] = useState('App Base');\n  const [access, setAccess] = useState('Denied');\n\n  function classChange(classes) {\n    setClassNames(classes);\n  }\n  return (\n    <Router>\n      <div className={classNames}>\n        <header>\n          <h1 className=\"heading\">Secure Contain Protect</h1>\n          <h3 className=\"headingMobile\">Secure Contain Protect</h3>\n          <h6>US - DELTA </h6>\n        </header>\n        <div className=\"navBar\">\n          <NavLink to=\"/Cryptids\" activeClassName=\"activeLink\" >Cryptids</NavLink>\n          <NavLink to=\"/SCPs\" activeClassName=\"activeLink\" >SCPs</NavLink>\n          <NavLink to=\"/Agents\" activeClassName=\"activeLink\">Agents</NavLink>\n        </div>\n        <Switch className=\"subNav\">\n          <Route path=\"/Cryptids\">\n            <Cryptids />\n          </Route>\n          <Route path=\"/SCPs\">\n            <SCPClasses classes={scpClasses} changeClass={classChange} access={access} />\n          </Route>\n          <Route path=\"/Agents\">\n            <Agents agents={agents} changeClass={classChange} />\n          </Route>\n          <Route path=\"/\">\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Cryptids() {\n  return (<text>Cryptids</text>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}